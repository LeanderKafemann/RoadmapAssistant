import pyperclip
from tkinter import *
from pyautogui import alert, prompt, confirm

root = Tk()
root.title("Roadmap-Generator")

c = Canvas(root, width=650, height=850)
c.configure(bg="light blue")
c.pack()

print("Willkommen beim Roadmap-Generator!", "Roadmap-Generator")
print("Sie nutzen Version 2.0.1 (Copyright Leander Kafemann 2025)\n")

alert("Willkommen beim Roadmap-Generator!", "Roadmap-Generator")

title = prompt("Titel der Roadmap:", "Roadmap-Generator")

c.num_steps = 1
c.steps = [("", "")]
c.aktStep = 0

def export():
    html = f"""<!DOCTYPE html>
    <html lang="de">
    <head>
      <meta charset="UTF-8">
      <title>{html_fit(title)}</title>
      <link rel="stylesheet" href="https://buero-os-toolkit-development.github.io/BueroWebKit/styling/style.css">
      <link rel="stylesheet" href="roadmap.css">
    </head>
    <body class="bwk-bg-neutral-100">
      <div class="bwk-container bwk-mt-5">
        <h1 class="bwk-text-center bwk-mb-4">{title}</h1>
        <div class="roadmap-wrapper">
          <h2>Roadmap</h2>
          <ol class="roadmap-list">
            <li class="roadmap-start">Status Quo</li>
    """

    for idx, (step_title, step_desc) in enumerate(c.steps):
        html += """        <div class="roadmap-arrow">↓</div>
    """
        html += f"""        <li class="roadmap-step">
              <details>
                <summary>{html_fit(step_title)}</summary>
                <div class="step-desc">{html_fit(step_desc)}</div>
              </details>
            </li>
    """

    html += """        <div class="roadmap-arrow">↓</div>
            <li class="roadmap-end">Ziel erreicht!</li>
          </ol>
        </div>
        <p class="small">
          Generated by RoadmapAssistant v2.0.1<br/>
          Copyright 2025 Leander Kafemann<br/>
          <a href="https://github.com/LeanderKafemann/RoadmapAssistant">&Uuml;ber RoadmapAssistant</a>
        </p>
      </div>
    </body>
    </html>
    """

    print("HTML generiert und in die Zwischenablage kopiert:")
    pyperclip.copy(html)
    print(30*"-")
    print(html)
    print(30*"-")
    alert("HTML generiert und in die Zwischenablage kopiert!", "Roadmap-Generator")
    if confirm("Als Datei exportieren?", "Roadmap-Generator", buttons=("Fortfahren", "Abbrechen")) == "Fortfahren":
        with open("roadmap.html", "w", encoding="utf-8") as f:
            f.write(html)
        alert("Roadmap erfolgreich in 'roadmap.html' gespeichert!", "Roadmap-Generator")

def html_fit(str_: str) -> str:
    return str_.replace("ü", "&uuml;").replace("ä", "&auml;").replace("ö", "&ouml;").replace("ß", "&szlig;").replace("Ü", "&Uuml;").replace("Ä", "&Auml;").replace("Ö", "&Ouml;")

def quit_():
    quit(code="exit")

def reset():
    c.titel.delete("1.0", END)
    c.inhalt.delete("1.0", END)

def saveAktStep():
    c.steps[c.aktStep] = (c.titel.get("1.0", END).strip(), c.inhalt.get("1.0", END).strip())

def actualizeContent():
    c.titel.insert("1.0", c.steps[c.aktStep][0])
    c.inhalt.insert("1.0", c.steps[c.aktStep][1])
    c.itemconfig(c.info_text, text=f"Beschreibung und Titel eingeben - Schritt {c.aktStep+1} / {len(c.steps)}")

def next_():
    saveAktStep()
    c.aktStep += 1
    reset()
    if c.aktStep > len(c.steps)-1:
        c.steps.append(("", ""))
        actualizeContent()
    else:
        actualizeContent()

def last_():
    if c.aktStep > 0:
        saveAktStep()
        c.aktStep -= 1
        reset()
        actualizeContent()
    else:
        print("Schon beim ersten Schritt!")

c.create_text(325, 50, text="Roadmap-Generator", font=("Verdana", 24, "bold"))
c.create_text(325, 840, text="Copyright 2025 Leander Kafemann  -  Version 2.0.0", font=("Verdana", 10))

c.create_text(20, 150, text="Titel:", font=("Verdana", "20"), anchor="w")
c.create_text(325, 200, text="Inhalt:", font=("Verdana", "25"))

c.info_text = c.create_text(325, 230, text="Beschreibung und Titel eingeben - Schritt 1 / 1", font=("Verdana", "10"))

c.inhalt = Text(root, wrap=WORD, font=("Verdana", "16"))
c.create_window(10, 250, height=480, width=630, window=c.inhalt, anchor="nw")
c.titel = Text(root, wrap="none", font=("Verdana", "18"))
c.create_window(180, 150, height=40, width=420, window=c.titel, anchor="w")

c.colorB = Button(master=root, command=last_, text="Vorheriger Schritt", background="light blue", relief="ridge", font=("Verdana", "10"))
c.create_window(25, 740, anchor="nw", window=c.colorB, height=30, width=290)
c.styleB = Button(master=root, command=next_, text="Nächster Schritt", background="light blue", relief="ridge", font=("Verdana", "10"))
c.create_window(625, 740, anchor="ne", window=c.styleB, height=30, width=290)

c.create_window(25, 775, anchor="nw", window=Button(master=root, command=export, text="Exportieren", background="light blue", relief="ridge"), height=40, width=180)
c.create_window(235, 775, anchor="nw", window=Button(master=root, command=reset, text="Reset", background="light blue", relief="ridge"), height=40, width=180)
c.create_window(445, 775, anchor="nw", window=Button(master=root, command=quit_, text="Beenden", background="light blue", relief="ridge"), height=40, width=180)

print()

root.mainloop()